# -*- coding: utf-8 -*-
"""Assignment-1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BeSYU-TGqlOVVP6NJquNKqii2Tukum4l

#Import Numpy and Pandas Libraries
"""

import numpy as np
import pandas as pd

"""# Uploading the generated csv file and converting it into dataframe"""

df = pd.read_csv('/content/Default Dataset.csv', names = ['X', 'Y'])
df.head()

df.describe()

"""# Data Cleansing"""

df.drop_duplicates()

df = df.dropna()

# Ensuring datapoints are within the coordinate range
df = df[(df['X'] >= 0) & (df['X'] <= 100) & (df['Y'] >= 0) & (df['Y'] <= 100)]

plt.figure(figsize=(6,6))
plt.scatter(df['X'], df['Y'],color='green')
plt.title('Original Image')
plt.show()

"""#The coordinates of all the vertices are in the range [0,1]. So, I transform them to the range [0,100]."""

matrix_size = 100
sparse_matrix = np.zeros((matrix_size,matrix_size),dtype=bool)

x_scaled = np.clip((df['X'] / df['X'].max()) * (matrix_size - 1), 0, 100 - 1).astype(int)
y_scaled = np.clip((df['Y'] / df['Y'].max()) * (matrix_size - 1), 0, 100 - 1).astype(int)

"""#Creating a sparse matrix"""

sparse_matrix[y_scaled, x_scaled] = True

"""#Performing a clockwise rotation by 90 degrees."""

rotated_90 = np.rot90(sparse_matrix)

rotated_y, rotated_x = np.where(rotated_90)

rotated_x = (rotated_x / (100 - 1)) * df['X'].max()
rotated_y = (rotated_y / (100 - 1)) * df['Y'].max()

"""#Visualization of the Rotated Image"""

#Import Matplotlib library

import matplotlib.pyplot as plt

# Plot the rotated image
plt.figure(figsize=(6, 6))
plt.scatter(rotated_x, rotated_y, color='red')
plt.title('Rotated Image')
plt.show()

"""#Performing horizontal flip"""

horz_flip = np.flip(sparse_matrix,0)

flipped_y, flipped_x = np.where(horz_flip)

flipped_x = (flipped_x / (100 - 1)) * df['X'].max()
flipped_y = (flipped_y / (100 - 1)) * df['Y'].max()

"""#Visualization of the Flipped Image

"""

# Plot the flipped image
plt.figure(figsize=(6, 6))
plt.scatter(flipped_x, flipped_y, color='blue')
plt.title('Flipped Image')
plt.show()